# https://ci.appveyor.com/project/OpenWaterAnalytics/stormwater-management-model

matrix:
  fast_finish: true

environment:
  global:
    # Environment variables used by astropy helpers
    PYTHON: "C:\\conda"
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci-helpers\\appveyor\\windows_sdk.cmd"

  matrix:
    - PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
      ARCH: "x86"
      platform: "x86"
    - PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "32"
      ARCH: "x86"
      platform: "x86"
    - PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "32"
      ARCH: "x86"
      platform: "x86"
    - PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
      ARCH: "amd64"
      platform: "x64"
    - PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "64"
      ARCH: "amd64"
      platform: "x64"
    - PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
      ARCH: "amd64"
      platform: "x64"

cache:
  - "C:\\condacache\\pkgs"

install:
  # Astropy ci-helpers. See https://github.com/astropy/ci-helpers
  - "git clone git://github.com/astropy/ci-helpers.git"
  - if "%PYTHON_VERSION%" == "3.4" set "BASE_PYTHON_VERSION=36"
  - if "%PYTHON_VERSION%" == "3.5" set "BASE_PYTHON_VERSION=36"
  - if "%PYTHON_VERSION%" == "3.6" set "BASE_PYTHON_VERSION=36"
  - if "%PYTHON_ARCH%" == "64" set "ARCH_LABEL=-x64"
  # These are already installed on appveyor.  Update them.
  - set "CONDA_ROOT=C:\Miniconda%BASE_PYTHON_VERSION%%ARCH_LABEL%"
  # we can't "activate root" with sufficiently-old conda which appveyor has (?)
  # - "%CONDA_ROOT%\\Scripts\\activate root"
  - set "PATH=%CONDA_ROOT%;%CONDA_ROOT%\Scripts;%CONDA_ROOT%\Library\bin;%PATH%"
  - set PATH
  - "%CMD_IN_ENV% conda config --set always_yes yes"
  - "%CMD_IN_ENV% conda install conda -q -y --no-pin"
  - "%CMD_IN_ENV% conda config --add pkgs_dirs C:\\condacache\\pkgs"
  - "%CMD_IN_ENV% conda install conda-build anaconda-client -q -y --no-pin"
  # Install dependencies
  - "%CMD_IN_ENV% conda-build conda.recipe --python %PYTHON_VERSION% --old-build-string"
  - "%CMD_IN_ENV% conda create -n test libswmm --use-local"
  - "%CMD_IN_ENV% conda create -n format clangdev -c conda-forge"

# Not a .NET project, we build in the install step instead
build: false

test_script:
  # Check file format with clang
  - "%CMD_IN_ENV% activate format"
  - "%CMD_IN_ENV% python tools\\clangformatter.py src\\"
  # Test built package
  #- "%CMD_IN_ENV% activate test"
  #- "%CMD_IN_ENV% run-swmm --version"

on_success:
  - "%CMD_IN_ENV% activate root"
  - "%CMD_IN_ENV% python tools\\build_and_upload.py"